#version 330 core

out vec4 FragColor;

in vec2 texCoord;
in vec3 normal;
in vec3 fragPos;

struct DirLight
{
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight
{
    vec3 position;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct SpotLight
{
    vec3 position;
    vec3 direction;

    float cutOff;
    float outerCutOff;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct Material 
{
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

uniform DirLight dirLight;
uniform PointLight pointLights[1];
uniform SpotLight spotLight;

uniform Material material;

uniform int checkSpec;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 cameraPos;

vec3 directionalLight(DirLight light, vec3 normal, vec3 cameraDir)
{
    vec3 lightDir = normalize(-light.direction);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(cameraDir, reflectDir), 0.0), material.shininess);

    vec3 ambient = light.ambient * vec3(texture(material.diffuse, texCoord));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, texCoord));
    
    vec3 specular = vec3(0.0f);
    if (checkSpec == 1)
        specular = light.specular * spec * vec3(texture(material.specular, texCoord));
    else
        specular = light.specular * spec * vec3(texture(material.diffuse, texCoord));

    return ambient + specular + diffuse;
}

vec3 pointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 cameraDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(cameraDir, reflectDir), 0.0), material.shininess);
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
    vec3 ambient = attenuation * light.ambient * vec3(texture(material.diffuse, texCoord));
    vec3 diffuse = attenuation * light.diffuse * diff * vec3(texture(material.diffuse, texCoord));
   
    vec3 specular = vec3(0.0);
    if (checkSpec == 1)
        specular = attenuation * light.specular * spec * vec3(texture(material.specular, texCoord));
    else
        specular = attenuation * light.specular * spec * vec3(texture(material.diffuse, texCoord));

    return ambient + diffuse + specular;
}

vec3 calcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 cameraDir)
{
    vec3 lightDir = normalize(light.position - fragPos);

    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(cameraDir, reflectDir), 0.0), material.shininess);

    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);

    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = (light.cutOff - light.outerCutOff);
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    vec3 ambient = attenuation * intensity * light.ambient * vec3(texture(material.diffuse, texCoord));
    vec3 diffuse = attenuation * intensity * light.diffuse * diff * vec3(texture(material.diffuse, texCoord)); 

    vec3 specular = vec3(0.0);
     if (checkSpec == 1)
        specular = attenuation * light.specular * spec * vec3(texture(material.specular, texCoord));
    else
        specular = attenuation * light.specular * spec * vec3(texture(material.diffuse, texCoord));

    return ambient + diffuse + specular;
}

void main()
{
    vec3 norm = normalize(normal);
    vec3 cameraDir = normalize(cameraPos- fragPos);

    vec3 phong = vec3(0.0);

    phong += directionalLight(dirLight, norm, cameraDir);

    //for (int i = 0; i < 4; i++)
    phong += pointLight(pointLights[0], norm, fragPos, cameraDir);

    phong += calcSpotLight(spotLight, norm, fragPos, cameraDir);

    FragColor = vec4(phong, 1.0);
}